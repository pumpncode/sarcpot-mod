SMODS.Consumable({
    key = 'brittle_hollow',
    set = 'Travel',
    atlas = 'consumables',
    pos = {x=0, y=0},
    discovered = false,
    config = {odds = 6},
    keep_on_use = function(self, card)
        return false
    end,
    loc_vars = function(self, info_queue)
		
        return { vars = {G.GAME.probabilities.normal, self.config.odds} }
	end,
    cost = 3,
    calculate = function(self, card, context)
    end,
    can_use = function(self, card)
		return true
	end,
    use = function(self, card, area, copier)
        if pseudorandom('brittle_odds') < G.GAME.probabilities.normal / self.config.odds then
            G.E_MANAGER:add_event(Event({
                trigger = 'after',
                delay = 0.4,
                blocking = true
            }))
            SMODS.calculate_effect({ message = localize('sarc_collapse'), colour = G.C.PURPLE}, card)
            
            G.E_MANAGER:add_event(Event({
                blockable = true,
                trigger = 'after',
                delay = 0.5,
                func = function()
                    play_sound('tarot1')
                    card.T.r = -0.2
                    card:juice_up(0.3, 0.4)
                    card.states.drag.is = true
                    card.children.center.pinch.x = true
                    card:start_dissolve()
                    card = nil
                    
                    local consumable = create_card('Spectral',G.consumeables, nil, nil, false, nil, 'c_black_hole')
            consumable:add_to_deck()
            G.consumeables:emplace(consumable)
            return true
                end
                }))
        else
    
        local _poker_hands = {}
		for k, v in pairs(G.GAME.hands) do
			if v.visible then _poker_hands[#_poker_hands+1] = k end
		end
        local random_hand = pseudorandom_element(_poker_hands, pseudoseed('brittle'))

		update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=random_hand,chips = G.GAME.hands[random_hand].chips, mult = G.GAME.hands[random_hand].mult, level=G.GAME.hands[random_hand].level})

        level_up_hand(nil, random_hand, true, 1)
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2, func = function()
            play_sound('tarot1')
            if card then card:juice_up(0.8, 0.5) end
            G.TAROT_INTERRUPT_PULSE = true
            return true end }))
        update_hand_text({delay = 0}, {mult = G.GAME.hands[random_hand].mult, StatusText = true})
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
            play_sound('tarot1')
            if card then card:juice_up(0.8, 0.5) end
            return true end }))
        update_hand_text({delay = 0}, {chips = G.GAME.hands[random_hand].chips, StatusText = true})
        G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.9, func = function()
            play_sound('tarot1')
            if card then card:juice_up(0.8, 0.5) end
            G.TAROT_INTERRUPT_PULSE = nil
            return true end }))
        update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level=G.GAME.hands[random_hand].level})
        delay(1.3)
    end
        update_hand_text({sound = 'button', volume = 0.7, pitch = 1.1, delay = 0}, {mult = 0, chips = 0, handname = '', level = ''})
    end

})



