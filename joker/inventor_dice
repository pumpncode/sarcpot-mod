SMODS.Joker {


    key = 'inventor_dice',

    config = { extra = { odds = 6 } },
    loc_vars = function(self, info_queue, card)
        return { vars = { G.GAME.probabilities.normal, card.ability.extra.odds, colours = {G.SP.C.travel_2}}}
    end,
    rarity = 2,
    atlas = 'sarcpot_atlas',
    pos = { x = 3, y = 2 },
    cost = 6,
    
    calculate = function(self, card, context)
        local target = pseudorandom_element(G.consumeables.cards, pseudoseed('inventor_dice'))


        if context.ending_shop and not context.blueprint and target ~= nil then 
               
                    target:remove()
                    play_sound('crumple1')

            if #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
                local set = ''
                if pseudorandom('inventor_dice') < G.GAME.probabilities.normal / card.ability.extra.odds then
                    set = 'Spectral'

                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
                G.E_MANAGER:add_event(Event({
                    trigger = after,
                    delay = 0.4,
                    func = function()
                        local card = SMODS.create_card{set = set, area = G.consumeables}
                        card:add_to_deck()
                        G.consumeables:emplace(card)
                        G.GAME.consumeable_buffer = 0
                        return true
                        
                    end
                    
                }))
                return {message = localize('sarc_scrapped'), colour = G.C.SECONDARY_SET.Spectral}
                else
                    local types = {'Tarot','Planet', 'Travel'}
                    set = pseudorandom_element(types, pseudoseed('inventor_dice'))

                    G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
                G.E_MANAGER:add_event(Event({
                    trigger = after,
                    delay = 0.4,
                    func = function()
                        local card = SMODS.create_card{set = set, area = G.consumeables}
                        card:add_to_deck()
                        G.consumeables:emplace(card)
                        G.GAME.consumeable_buffer = 0
                        return true
                    end
                }))
                return {message = localize('sarc_scrapped'), colour = G.C.FILTER}
                end
                
        end
    end
end
}

--[[function poll_consumable(seed)
    local types = {}
    local blacklist = {'Spectral', 'Cine'}

    for k, v in pairs(SMODS.ConsumableTypes) do
        for i,v in ipairs(blacklist) do
            if not k == v then
                types[#types + 1] = k
            end
        end 
    end

    return SMODS.create_card {
        set = pseudorandom_element(types, pseudoseed(seed)),
        area = G.consumables,
        key_append = seed,
    }
end]]--
